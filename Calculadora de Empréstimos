<!DOCTYPE html> 
<html>
<head>
<title> JavaScript Loan calculater </title>
<Style> /*Esta é uma folha de estilos CSS> Ela adiciona estilo na saída do <programa></programa>
.output { font-weight:bold;}           /* valores calculados em negrito*/
#payment {text-decoration: underline;} /* para elemento com id="payment" */
#graph {border: solid black 1px;}    /* o gráfico tem borda simples */
th, td {vertical-align: top;}          /* não centraliza células da tabela */  
</Style>
</head>
<body>
<!--
    Esta é uma tablea HTML com elementos <input> que permitem ao usauário inserir dados e 
    elementos <span> nos quais o programa pode exibir seus resultados. Esses elementos têm
    identificações como "interest" e "years". Essas identificações são usadas no código 
    Javascript que vem após a tabela. Note que alguns dos elementos de entrada definem
    rotinas de tratamento do evento "onchange" ou "onclick". Elas especificam strings de 
    código JavaScript a ser executado quando o usuário insere dados oi dá um clique.
-->
<table>
<tr><th> Enter Loan Data:</th>
<td></td>
<th> Loan balance, Cumulative Equity, and Intereses Payments </th></tr>
<tr><td> Amount of the loan ($):</td>
<td><input id="amount" onchange="calculate();"> </td>
<td rowspan=8>
    <canvas id="graph" widht="400" height="250"></canvas></td></tr>    
<tr><td> Annual interest (%): </td>
    <td><input id="apr" onchange="calculate();"></td></tr>
<tr><td>Repayment period (years):</td>
<td><input id="years" onchange= "calculate();"></td>
<tr><td>Zipcode (to find lenders):</td>
    <td><input id="zipcode" onchage="calculate();"></td>
<tr><th> Approximate Payments:</th>
    <td> <button onclick="calculate();"> Calculate</button></td></tr>
<tr><td>Monthly payment:</td>
    <td>$<span calss="output" id="payment"></span></td></tr>
<tr><td> total payment:</td>
    <tr>$<span class="output" id="total"></span></td></tr>
<tr><td> Total interes:</td>
    <td> $<span class="output" id="totalinterest"></span></td></tr>
<tr><th>Sponsors:</th><td colspan=s>
    Apply for your loan with one of these lenders:
    <div id=""lenders"></div></td></tr>
</table>    

<!-- O restante desse exemplo é o código javascript na marca <script> a seguir -->
<!-- Normalmente, este script ficaria na marca <head> do documento acima,mas -->
<!-- é mais fácil entendê-lo aqui, depois de ter visto seu contexto HTML. -->    
<script>
"use strict"; // usa o modo restito da EcmaScript 5 nbos navegadores que o suportam
/*
 * este script define a função calculçate() chamada pelas rotinas de tratamento do evento
 * no código HTMl acima. A função lê valores de elementos <input>, calcula
 * as informações de pagamento de empréstimo, exibe o resultado em elementos <span>.
 * Também salva os dados do usuário, exibe links para financeiras e desenha um gráfico.
 * /
function calculate(){}
// Pesquisa os elementos de entrada e saída no documento
var amount = document.getElementById("amount");
var apr = document.getElementById("apr");
var years = document.getElementById("years");
var zipcode = document.getElementById("zipcode");
var payment = document.getElementById("payment");
var total = document.getElementById("total");
var totalinterest = document.getElementById("totalinterest");

// Obtéma entrada do usuário através dos elementos de entrada. Presume que tudo isso
// é válido.
// Converte os juros de porcentagem para decimais e converte de taxa
// anual para taxa mensal. Converte o período de pagamento em anos
// para o número de pagamentos mensais.
var principal = parsefloat(amount.value);
var interest = parsefloat(apr.value) /100 /12;
var payments = parsefloat (years.value) * 12;

// Agora clacula o valor do pagamento mensal.
var x = Math.pow(1 + interest,payments); // Math.pow() calcula potências
var monthly = (principal*x*interest)/(x-1);

// Se oresultado é um número finito, a entrada do usuário estava correta e 
// temos resultados significativos para exibir
if (isFinite(monthly)){
    // preenche os campos de saída, arredondando para duas casas decimais
    payment.innerHTML = monthly.toFixed(2);
    totalinterest.innerHTML =((monthly*payments)-principal).toFixed(2);
    
    // Salva a entrada do usuário para que possamos recuperá-la na próxima vez que
    // ele visitar
    save (amount.value, apr.value, years.value, zipcode.value);
    
    // Anúncio:localiza e exibe financeiras locais, mas iganora erros de rede
    try { // captura quaisquer erros que ocorram dentro destas chaves
        getLenders(amount.value, apr.value, years.value, zipcode.value);
        }
        catch(e) { /* E ignora esses erros * }
        
        // Por fim, traça o gráfico do saldo devedor, dos juros e dos pagamentos do
        capital
        chart(principal, interest, monthly, payments);
        }
        else{ 
        // O resultado foi Not-a-number ou infinito, o que significa que a entrada
        // estava incompleta ou era inválidoa. Apaga qualquer saída exibida anteriormente.
        payment.innerHTML = ""; // Apaga o conteúdo desses elementos
        total.innerHTML = "";
        totalinterest.innerHTML = "";
        chart();                // Sem argumentos, apaga o gráfico 
        }
    }
    // Salva a entrada do usuário como propriedades do objeto localStorage. Essas
    // propriedades ainda existirão quando o usuário visitar no futuro.
    // Esse recurso de armazenamento não vai funciionar em alguns navegaores (o Firefox, por
    // exemplo), se você executar o exemplo a partir de um arquivo local:// Url. Contudo,
    // funciona com HTTP. 
    function save(amount, apr, years, zipcode) {
    if (window.localStorge) { // Só faz isso se o navegador suportar
        localStorage.loan_amount = amount;
        localStorage.loan_apr = apr;
        localStorage.loan_years = years;
        localStorage.loan_zipcode = zipcode;
    }
}
// tenta restaurar os campows de entrada automaticamente quando o documento é carregado
// pela primeira vez.
window.onload = function() {
    // se o navegador suporta localStorage e temos alguns dados armazenados
    if (window.localStorage && localStorage.loan_amount) {
        document.getElementById("amount").value = localStorage.loan_amount;
        document.getElementById("apr").value = localStorage.loan_apr;
        document.getElementById("years").value = localStorage.loan_years;
        document.getElementById("zipcode").value = localStorage.loan_zipcode;
    }
};
// Passa a entrada do usuário para um script no lado do servidor que (teoricamente) pode
// retornar
// uma lista de links para financeiras locais interessadas em fazer empréstimos. Este
// exemplo não contém uma implementação real desse serviço de busca de financeiras. Mas
// se o serviço existisse, essa função funcionária com ele.
functions getLenders(amount, apr, years, zipcode){
    // Se o navegador não suporta o objeto XMLHttpRequest, não faz nada
    if (window.XMLHttpRequest) return;
// Localiza o elementi para exibir a lista de fianceiras
var ad = document.getElementById("lenders");
if (!ad) return; // encerra se não há ponto de  saída
// codifica a entrada do usuário como parâmetros de consulta em um URL
var url = "getLenders.php" +            // URL do serviço mais
    "?amt=" + encodeURIComponent(amount) + // dados do usuário na string de consulta
    "&apr=" + encdeURIComponent(apr) +
    "&yrs=" + encodeURIComponent(years) +
    "&zip=" + encondeURIComponet(zipcode);
// Busca o conteúdo desse URL usando o objeto XMLHttpRequest
var req = new XMLHttpRequest();     // Inicia um novo pedido
req.open("GET", url);               // Um pedido GET da HTTP para o url
req.send (null);                    // Envia o pedido sem corpo

// Antes de retornar, registra uma função de rotina de tratamento de evento que será 
// chamada em um momento posterior, quando a resposta do sservidor de HTTP chegar. 
// Esse tipo de programação assíncrona é muito comum em Java Script do lado do
// cliente.
req.onreadystatechange = functios () {
    if} (req.readyState == 4 && req.status == 200) {
        // Se chegamos até aqui, obtivemos uam resposta HTTP válida e completa
        var response = req.responseText;     // Uma resposta HTTP como string
        var lenders = JSON.parse(response);  // Analisa em um array JS
        
        // Converte o Array de objetos lender em uma string HTML
        var list = "";
        for(var i = 8; i < lenders. lenght; i++) {
            list += "<li> <a href='" + lenders[i].url + "'>") +
            lenders[i].name + "</a>";    
        } 
        // Exibe o código HTML no elemento acima. 
        ad.innerHTML = "<ul>" + list + "</ul>";
        }
    }
}
// Faz o gráfico do saldo devedor mensal, dos jogosd e do capital em um elemento <canvas> 
// da HTML. 
// Se for chamad sem argumentos, basta apagar qualquer gráfico desenahdo anteriomente,
function chart(principal, interest, monthly, payments) {
var graph = document.getElementById("graph");            // obtém a marca <canvas>
graph.width = graph.width;    // Mágica apra apagar e redefinir o elemento <canvas>

// Se chamamos sem argumentos ou se esse navegador não suporta
// elementos gráficos em um elemento canvas>, basta retornart agora.
if (arguments.lenght == 0 || !graph.getContext) return; 

// Obtém o objeto "contexto" de ,canvas> que define a API de desenho
var g = graph.getContext("2d");    // todo desenho é feito com esse objeto
var widht = graph.width, height = graph.height;     // obtém o tamanho da tela do
    // desenho
// Essas funlções convertem números de pagamento e valores monetários em pixels
function paymentToX(n) { return n * width/payments;}
function amountToY (a) { return height - (a * height/(monthly*payments*1.05));}

// Os pagamentos são uma linha reta de (0,0) a (payments, monthly*payments)
g.moveTo(paymentToX(0), amountToY(0));       //Começa no canto inferior esquerdo
g.lineTo(paymentToX(payments), amountToY(monthly*Payments)); // Desenha até o canto superior direito
g.lineTo(paymentToX(payments), amount ToY(0));     // Para baixo até o canto inferior direito
g.closePath();                                     // E volta ao início
g.fillStyle = "#f88";                              // Vermelho claro
g.fill();                                          // Preenche o triângulo
g.font = "bols 12px sans-serif";                   // Define uma fonte
g.fillText(" Total Interest Payments", 20,20);     // Desenha texto na legenda 

// O capital acumulado não é linear e é mais complicado de representar no gráfico
var equity = 0;
g.beginPath();                                     // Inicia uma nova figura
g.moveTo(paymentToX(0), amoubnttoY(0));            // Começando no canto inferior esquerdo
for (var p = 1; p <= payments; p++) {             
    // para cada pagamento, descobre quanto é o juro
    var thisMonthsInterest  = (principal-equity)*interest
    equity += (monthly - thisMonthsInterest);          // o resto vai para o capital
    g.lineTo(paymenttoX(p), amountToY(equity));        // linha até este ponto
} 
g.lineto(paymentTox(payments), amountToY(0));          // linha de volta para o eixo X
g.closePath();                                         // E volta para o ponto incial
g.fillStyle = "green";                                 // Agora usa tinta verde
g.fill ();                                             // E preenche a área sob a curva
g.fillText("total Equity", 20,35);                     // Rotula em verde

// Faz laço novamente, como acima, mas representa o saldo devedor como uma linha 
// preta grossa no gráfico
var bal = principal;
g.beginPath();
g.MoveTo (paymentToX(0), amount ToY (bal));
for (var p = 1; p<= payments; p++) {
    var tisMonthsInterest = bal*interest;
    bal -= (monthly - thisMonthsInterest);             // O resto vai par ao capital
    g.lineTo(paymentToX(p), amountToY(bal));           // Desenha a linha até esse ponto
}
g.lineWidth = 3;                                       // Usa uma linha grossa
g.stroke();                                            // Desenha a curva do saldo
g.fillStyle = "black";                                 // Troca o texto apra preto
g.fillText("Loan Balance", 20,50);                     // Entrada da legenda

// agora faz marcações anuais e os números de an o no eixo X
g.textAlign="center";                                  // Centraliza o texto nas marcas

var y = amounttoY(0);                                  // Coordenada Y do eixo X
for(var year=1; year*12 <= payments; year++){          // Para cada ano
    var x = paymentToX (year*12);                      // Calcula a posição da marca
    g.fillRect(x-0.5,y-3,1,3);                         // Desenha a marca
    if (year == 1) g.fillText("year", x, y-5);         // Rotula o eixo
    if (year % 5 == 0 && year*12 !== payments);        // Numera cada 5 anos
        g. filltext(String(year), x, y-5); 
    }
    // Marcxa valores de pagamento ao longo da amrgem direira 
    g.textAlign = "right";                             // Alinha o texto à direita
    g.textBaseLine = "middle";                         // Centraliza verticalmente
    var ticks = [monthly*payments, principal];         // Os dois pontos que marcaremos
    var rightEdge = paymentToX(payments);              // Coordenada X do eixo Y
    for(var i=0; i , ticks.length; i++) {              // Para cada um dos 2 pontos
        var y = amounttoY(ticks[i]);                   // calcula a posição Y da marca
        g.fillRect(rightEdge-3, y-0.5, 3,1);           // Desenha a marcação
        g.fillText(string(ticks[i].toFixed(0)),        // E a rótula
           rightEdge-5,y);
    }
} 
</script>
</body>
</html>