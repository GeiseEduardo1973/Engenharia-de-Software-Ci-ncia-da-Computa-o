<!DOCTYPE html> 
<html>
<head>
<title> JavaScript Loan calculater </title>
<Style> /*Esta é uma folha de estilos CSS> Ela adiciona estilo na saída do <programa></programa>
.output { font-weight:bold;}           /* valores calculados em negrito*/
#payment {text-decoration: underline;} /* para elemento com id="payment" */
#graph {border: solid black 1px;}    /* o gráfico tem borda simples */
th, td {vertical-align: top;}          /* não centraliza células da tabela */  
</Style>
</head>
<body>
<!--
    Esta é uma tablea HTML com elementos <input> que permitem ao usauário inserir dados e 
    elementos <span> nos quais o programa pode exibir seus resultados. Esses elementos têm
    identificações como "interest" e "years". Essas identificações são usadas no código 
    Javascript que vem após a tabela. Note que alguns dos elementos de entrada definem
    rotinas de tratamento do evento "onchange" ou "onclick". Elas especificam strings de 
    código JavaScript a ser executado quando o usuário insere dados oi dá um clique.
-->
<table>
<tr><th> Enter Loan Data:</th>
<td></td>
<th> Loan balance, Cumulative Equity, and Intereses Payments </th></tr>
<tr><td> Amount of the loan ($):</td>
<td><input id="amount" onchange="calculate();"> </td>
<td rowspan=8>
    <canvas id="graph" widht="400" height="250"></canvas></td></tr>    
<tr><td> Annual interest (%): </td>
    <td><input id="apr" onchange="calculate();"></td></tr>
<tr><td>Repayment period (years):</td>
<td><input id="years" onchange= "calculate();"></td>
<tr><td>Zipcode (to find lenders):</td>
    <td><input id="zipcode" onchage="calculate();"></td>
<tr><th> Approximate Payments:</th>
    <td> <button onclick="calculate();"> Calculate</button></td></tr>
<tr><td>Monthly payment:</td>
    <td>$<span calss="output" id="payment"></span></td></tr>
<tr><td> total payment:</td>
    <tr>$<span class="output" id="total"></span></td></tr>
<tr><td> Total interes:</td>
    <td> $<span class="output" id="totalinterest"></span></td></tr>
<tr><th>Sponsors:</th><td colspan=s>
    Apply for your loan with one of these lenders:
    <div id=""lenders"></div></td></tr>
</table>    

<!-- O restante desse exemplo é o código javascript na marca <script> a seguir -->
<!-- Normalmente, este script ficaria na marca <head> do documento acima,mas -->
<!-- é mais fácil entendê-lo aqui, depois de ter visto seu contexto HTML. -->    
<script>
"use strict"; // usa o modo restito da EcmaScript 5 nbos navegadores que o suportam
/*
 * este script define a função calculçate() chamada pelas rotinas de tratamento do evento
 * no código HTMl acima. A função lê valores de elementos <input>, calcula
 * as informações de pagamento de empréstimo, exibe o resultado em elementos <span>.
 * Também salva os dados do usuário, exibe links para financeiras e desenha um gráfico.
 * /
function calculate(){}
// Pesquisa os elementos de entrada e saída no documento
var amount = document.getElementById("amount");
var apr = document.getElementById("apr");
var years = document.getElementById("years");
var zipcode = document.getElementById("zipcode");
var payment = document.getElementById("payment");
var total = document.getElementById("total");
var totalinterest = document.getElementById("totalinterest");

// Obtéma entrada do usuário através dos elementos de entrada. Presume que tudo isso
// é válido.
// Converte os juros de porcentagem para decimais e converte de taxa
// anual para taxa mensal. Converte o período de pagamento em anos
// para o número de pagamentos mensais.
var principal = parsefloat(amount.value);
var interest = parsefloat(apr.value) /100 /12;
var payments = parsefloat (years.value) * 12;

// Agora clacula o valor do pagamento mensal.
var x = Math.pow(1 + interest,payments); // Math.pow() calcula potências
var monthly = (principal*x*interest)/(x-1);

// Se oresultado é um número finito, a entrada do usuário estava correta e 
// temos resultados significativos para exibir
if (isFinite(monthly)){
    // preenche os campos de saída, arredondando para duas casas decimais
    payment.innerHTML = monthly.toFixed(2);
    totalinterest.innerHTML =((monthly*payments)-principal).toFixed(2);
    
    // Salva a entrada do usuário para que possamos recuperá-la na próxima vez que
    // ele visitar
    save (amount.value, apr.value, years.value, zipcode.value);
    
    // Anúncio:localiza e exibe financeiras locais, mas iganora erros de rede
    try { // captura quaisquer erros que ocorram dentro destas chaves
        getLenders(amount.value, apr.value, years.value, zipcode.value);
        }
        catch(e) { /* E ignora esses erros * }
        
        // Por fim, traça o gráfico do saldo devedor, dos juros e dos pagamentos do
        capital
        chart(principal, interest, monthly, payments);
        }
        else{ 
        // O resultado foi Not-a-number ou infinito, o que significa que a entrada
        // estava incompleta ou era inválidoa. Apaga qualquer saída exibida anteriormente.
        payment.innerHTML = ""; // Apaga o conteúdo desses elementos
        total.innerHTML = "";
        totalinterest.innerHTML = "";
        chart();                // Sem argumentos, apaga o gráfico 
        }
    }
    // Salva a entrada do usuário como propriedades do objeto localStorage. Essas
    // propriedades ainda existirão quando o usuário visitar no futuro.
    // Esse recurso de armazenamento não vai funciionar em alguns navegaores (o Firefox, por
    // exemplo), se você executar o exemplo a partir de um arquivo local:// Url. Contudo,
    // funciona com HTTP. 
    function save(amount, apr, years, zipcode) {
    if (window.localStorge) { // Só faz isso se o navegador suportar
        localStorage.loan_amount = amount;
        localStorage.loan_apr = apr;
        localStorage.loan_years = years;
        localStorage.loan_zipcode = zipcode;
    }
}
// tenta restaurar os campows de entrada automaticamente quando o documento é carregado
// pela primeira vez.
window.onload = function() {
    // se o navegador suporta localStorage e temos alguns dados armazenados
    if (window.localStorage && localStorage.loan_amount) {
        document.getElementById("amount").value = localStorage.loan_amount;
        document.getElementById("apr").value = localStorage.loan_apr;
        document.getElementById("years").value = localStorage.loan_years;
        document.getElementById("zipcode").value = localStorage.loan_zipcode;
    }
};
// Passa a entrada do usuário para um script no lado do servidor que (teoricamente) pode
// retornar
// uma lista de links para financeiras locais interessadas em fazer empréstimos. Este
// exemplo não contém uma implementação real desse serviço de busca de financeiras. Mas
// se o serviço existisse, essa função funcionária com ele.
functions getLenders(amount, apr, years, zipcode){
    // Se o navegador não suporta o objeto XMLHttpRequest, não faz nada
    if (window.XMLHttpRequest) return;
    }
</script>
</body>
</html>